name: Docker Image CI

on:
  push:
    branches:
      - main

jobs:
  build-and-push-runtime:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ghcr.io/dev-projects-planet/lemonai-runtime
      DOCKERFILE: containers/runtime/Dockerfile
      VERSION_FILE: containers/runtime/VERSION
      PLATFORMS: linux/amd64,linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_USER }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Read runtime version
        id: get_runtime_version
        run: |
          VERSION=$(cat ${{ env.VERSION_FILE }} | tr -d '\n' | tr -d '\r' | xargs)
          echo "RUNTIME_VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected runtime version: $VERSION"

      - name: Build and push runtime image
        run: |
          RUNTIME_TAG=${{ steps.get_runtime_version.outputs.RUNTIME_VERSION }}
          if [ -z "$RUNTIME_TAG" ]; then
            echo "Error: Could not read runtime version from file. Exiting."
            exit 1
          fi
          
          RUNTIME_VERSION_TAG=${{ env.IMAGE_NAME }}:$RUNTIME_TAG
          RUNTIME_LATEST_TAG=${{ env.IMAGE_NAME }}:latest

          echo "Building and pushing $RUNTIME_VERSION_TAG, $RUNTIME_LATEST_TAG for platforms [${{ env.PLATFORMS }}]"
          docker buildx build \
            --platform ${{ env.PLATFORMS }} \
            --tag $RUNTIME_VERSION_TAG \
            --tag $RUNTIME_LATEST_TAG \
            -f ${{ env.DOCKERFILE }} \
            --push .

  build-and-push-app:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      APP_IMAGE_NAME: ghcr.io/dev-projects-planet/lemonai
      APP_DOCKERFILE: containers/app/Dockerfile
      APP_VERSION_FILE: containers/app/VERSION
      PLATFORMS: linux/amd64,linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_USER }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Read app version
        id: get_app_version
        run: |
          VERSION=$(cat ${{ env.APP_VERSION_FILE }} | tr -d '\n' | tr -d '\r' | xargs)
          echo "APP_VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected app version: $VERSION"

      - name: Build and push app image
        run: |
          APP_TAG=${{ steps.get_app_version.outputs.APP_VERSION }}
          if [ -z "$APP_TAG" ]; then
            echo "Error: Could not read app version from file. Exiting."
            exit 1
          fi
          
          APP_VERSION_TAG=${{ env.APP_IMAGE_NAME }}:$APP_TAG
          APP_LATEST_TAG=${{ env.APP_IMAGE_NAME }}:latest

          echo "Building and pushing $APP_VERSION_TAG, $APP_LATEST_TAG for platforms [${{ env.PLATFORMS }}]"
          docker buildx build \
            --platform ${{ env.PLATFORMS }} \
            --tag $APP_VERSION_TAG \
            --tag $APP_LATEST_TAG \
            -f ${{ env.APP_DOCKERFILE }} \
            --push .